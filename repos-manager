#!/bin/bash

set -eo pipefail

readonly CONFIG_FROM_HOME="${HOME}/.repos-managerrc"
readonly CONFIG_FROM_PWD="${PWD}/.repos-managerrc"
REPOSITORIES_NAMES=()

main () {
  source $(get_configuration)
  prepare_repo_names_list
  check_args "$@"
}

check_args () {
  if [[ $# -lt 1 ]]; then
    show_help
    exit 1
  fi

  case $1 in
    show)       show_versions_serially
                exit 0
                ;;

    sync-all)   check_any_dirty 
                concurrently_sync_repos
                exit 0
                ;;

    clone)      concurrently_clone
                exit 0
                ;;

    complpath)  get_completion_path 
                exit 0
                ;;

    compl)      shift
                get_completion_to_word "$@"
                exit 0
                ;;

    *)          show_help
                exit 1
                ;;
  esac
}


get_configuration () {
  local cfg; 

  if [[ -f $CONFIG_FROM_PWD ]]; then
    cfg=$CONFIG_FROM_PWD
  else
    if [[ -f $CONFIG_FROM_HOME ]]; then
      cfg=$CONFIG_FROM_HOME
    else
      show_config_help
      exit 1
    fi
  fi

  echo $cfg
}

concurrently_clone () {
  for repo in ${REPOSITORIES[@]}; do
		local full_repo_ref=$repo
		local branch=$(echo $full_repo_ref | awk -F'#' '{print $2}')
		local full_repo=$(echo $full_repo_ref | awk -F'#' '{print $1}')
		local repo_name=$(echo $full_repo | awk -F'/' '{print $2}')
		local git_url="https://github.com/${full_repo}"

		clone_repo_and_use_branch $git_url $branch $repo_name &
  done
  wait
}

clone_repo_and_use_branch () {
  local repo_url=$1
  local branch=$2
  local repo_name=$3

  echo "Cloning ${repo_name}#${branch}"

  git clone $repo_url

  cd $repo_name
  git remote add upstream $repo_url

  if [[ $branch != "master" ]]; then
    git checkout -q $branch
  fi
}

concurrently_sync_repos () {
  for repo in ${REPOSITORIES_NAMES[@]}; do
    sync_repo $repo &
  done
  wait
}

sync_repo () {
  local repo=$1

  cd $repo
  git checkout -q master
  git fetch -q upstream 

  if [[ $(git rev-parse HEAD) != $(git rev-parse @{u}) ]]; then
    git rebase -q upstream/master
    printf "%20s | New Updates\n" $repo
    return 0
  fi

  printf "%20s | Already Updated\n" $repo
}

check_any_dirty () {
  for repo in ${REPOSITORIES_NAMES[@]}; do
    [[ -d $repo ]] || (print::single_bold "$repo" "is missing."; exit 1)

    pushd .
    cd $repo

    if git::is_dirty $repo; then 
      print::single_bold "$repo" "is dirty." 
      exit 1
    fi

    popd
  done
}
 
git::pretty_version () {
  local branch=`git symbolic-ref --short -q HEAD`
  local sha=`git rev-parse HEAD`
  local ver="${branch}#${sha}"

  echo ${ver::20}
}

git::is_dirty() {
  if [[ -n $(git status --porcelain) ]]; then
    return 0
  else
    return 1
  fi
}

prepare_repo_names_list () {
  REPOSITORIES_NAMES=()

  for repo in ${REPOSITORIES[@]}; do
    local repo_name=$(echo $repo | cut -d "/" -f 2 | cut -d "#" -f 1)
    REPOSITORIES_NAMES+=($repo_name)
  done
}

show_versions_serially () {
  print::row::bold REPOSITORY VERSION DIRTY
  print::row::bold ---------- ------- -----

  for repo in ${REPOSITORIES_NAMES[@]}; do
    show_version $repo
  done
}

show_version () {
  local repo=$1

  if ! [[ -d $repo ]]; then
    print::row $repo "missing" " "
    return
  fi

  pushd .
  cd $repo

  local ver=$(git::pretty_version $repo)

  if git::is_dirty; then
    print::row::bold $repo $ver x
  else
    print::row $repo $ver " "
  fi

  popd
}

get_completion_path () {
  local dir=$(dirname $(readlink "${BASH_SOURCE[0]}"))/autocomplete
  echo $dir
}

get_completion_to_word () {
  local readonly commands=(
    "show: show repos and their respective vers"
    "clone: clones all registered repos"
    "sync-all: fetches all repos HEAD and rebase"
  )
  local readonly prefix=$@
  local matches;

  IFS=$'\n'
  if [[ -z $prefix ]]; then
    for cmd in ${commands[@]}; do echo $cmd; done
    return 0
  fi

  for cmd in $commands; do
    local cmd_name=$(cut -d ":" -f 1 <<< $cmd)

    if [[ ${cmd_name} == $prefix* ]]; then
      echo $cmd
    fi
  done
}


show_help () {
  cat <<-EOF
    Usage:
      $ ./repos-manager.sh <cmd> [args]


    Commands:
      show              shows repositories and their respective vers, 
                        i.e, their HEADS.

      clone             clones all repositories to {ORGANIZATION}_TIMESTAMP. 

      sync-all          for every repository, goes to master, fetches fromm
                        upstream and  then performs a rebase.
EOF
}

show_config_help () {
  cat <<-EOF
  Error:
    "repos-manager" requires a '.repos-managerrc' file in the current 
    directory or at 'HOME'. The configuration file must define the 
    following variables:

      - REPOITORIES     array of repositories to perform actions on.
                           
                          Format: organization_or_user/name#branch
                          Example: cirocosta/repos-manager#master
                          
  Example:
    configuration file '{HOME}/Development/myorg/.repos-managerrc':
    
      '''
      #!/bin/bash

      readonly REPOSITORIES=(
        "repo1" 
        "repo2" 
        "repo3"
      )
      '''
EOF
}

pushd () {
  command pushd "$@" > /dev/null
}

popd () {
  command popd "$@" > /dev/null
}

print::single_bold () {
  printf "\e[1m%s\e[0m " $1
  shift
  printf "$@\n"
}

print::row::bold () {
  printf "\e[1m%20s : %22s : %8s\e[0m\n" $1 $2 $3
}

print::row () {
  printf "%20s : %22s : %8s\n" $1 $2 $3
}

main "$@"
